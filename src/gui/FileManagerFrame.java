package gui;

import console.AbstractUser;

import console.DocClient;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.io.*;
import java.sql.Timestamp;
import java.util.Locale;

public class FileManagerFrame {
    AbstractUser user;
    FileSelectJudgeFrame fileSelectJudgeFrame;
    FileBrowsingFrame fileBrowsingFrame;

    private JPanel fileManagerPanel;
    private JFileChooser fileChooser;
    private JLabel selectedFileLabel;
    private JPanel selectedLabelPanel;
    private JButton selectFileButton;
    private JPanel selectFileButtonPanel;

    String NumberInFileManagerFrame;
    String DescriptionInFileManagerFrame;

    FileManagerFrame(FileBrowsingFrame fileBrowsingFrame) {
        this.fileBrowsingFrame = fileBrowsingFrame;

        $$$setupUI$$$();

        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);

        selectFileButton.addActionListener(e -> {
            fileSelectJudgeFrame = new FileSelectJudgeFrame(this);
            fileSelectJudgeFrame.FileSelectFrameShow();

        });

    }

    // 新增方法用于设置用户
    public void setUser(AbstractUser user) {
        this.user = user;
    }


    public JPanel getFileManagerPanel() {
        return fileManagerPanel;
    }

    public boolean uploadFile(File selectedFile) {
        //boolean result=false;
        if (selectedFile == null || !selectedFile.exists()) {
            System.out.println("File does not exist!");
            return false;
        }
        try  {
            fileBrowsingFrame.mainFrame.client.sendMessage("CLIENT>>> FILE_UPLOAD" + " " + NumberInFileManagerFrame + " " + fileBrowsingFrame.mainFrame.user.getName() + " " +
                    new Timestamp(System.currentTimeMillis()) + " " + DescriptionInFileManagerFrame + " " + selectedFile.getAbsolutePath()
                    + " " + selectedFile.getName());
            String response = fileBrowsingFrame.mainFrame.client.receiveMessage().join().toString();
            System.out.println("Response from server: " + response);
            if ("UPLOAD_SUCCESS".equals(response)) {
                new DownAndUpLoadSuccess();
                return true;
            } else {
                System.err.println("Upload failed.");
                return false;
            }
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        fileManagerPanel = new JPanel();
        fileManagerPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 5, 0), -1, -1));
        fileManagerPanel.setAlignmentX(1.0f);
        fileManagerPanel.setAlignmentY(1.0f);
        fileManagerPanel.setAutoscrolls(false);
        Font fileManagerPanelFont = this.$$$getFont$$$(null, -1, -1, fileManagerPanel.getFont());
        if (fileManagerPanelFont != null) fileManagerPanel.setFont(fileManagerPanelFont);
        selectedLabelPanel = new JPanel();
        selectedLabelPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        fileManagerPanel.add(selectedLabelPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectedFileLabel = new JLabel();
        selectedFileLabel.setAlignmentX(1.0f);
        selectedFileLabel.setAlignmentY(1.0f);
        selectedFileLabel.setAutoscrolls(false);
        Font selectedFileLabelFont = this.$$$getFont$$$("Century Schoolbook", -1, -1, selectedFileLabel.getFont());
        if (selectedFileLabelFont != null) selectedFileLabel.setFont(selectedFileLabelFont);
        selectedFileLabel.setText("No file selected");
        selectedLabelPanel.add(selectedFileLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(20, -1), null, 0, false));
        selectFileButtonPanel = new JPanel();
        selectFileButtonPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        fileManagerPanel.add(selectFileButtonPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectFileButton = new JButton();
        selectFileButton.setActionCommand("selectFileButton");
        selectFileButton.setLabel("select File");
        selectFileButton.setText("select File");
        selectFileButtonPanel.add(selectFileButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return fileManagerPanel;
    }

    public JFileChooser getFileChooser() {
        return fileChooser;
    }

    public JLabel getSelectedFileLabel() {
        return selectedFileLabel;
    }
    public void setNumber(String number) {
        this.NumberInFileManagerFrame = number;
    }

    public void setDescription(String description) {
        this.DescriptionInFileManagerFrame = description;
    }

}
